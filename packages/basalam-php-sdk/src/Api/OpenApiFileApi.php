<?php
/**
 * OpenApiFileApi
 * PHP version 8.1
 *
 * @category Class
 * @package  BasalamSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * basalam
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BasalamSDK\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Psr7\Utils;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use BasalamSDK\ApiException;
use BasalamSDK\Configuration;
use BasalamSDK\FormDataProcessor;
use BasalamSDK\HeaderSelector;
use BasalamSDK\ObjectSerializer;

/**
 * OpenApiFileApi Class Doc Comment
 *
 * @category Class
 * @package  BasalamSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OpenApiFileApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createFileV3FilesPost' => [
            'multipart/form-data',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createFileV3FilesPost
     *
     * Create File
     *
     * @param  string $authorization authorization (required)
     * @param  \SplFileObject $file file (required)
     * @param  \BasalamSDK\Model\UserUploadFileTypeEnum $file_type file_type (required)
     * @param  string|null $custom_unique_name custom_unique_name (optional)
     * @param  int|null $expire_minutes expire_minutes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFileV3FilesPost'] to see the possible values for this operation
     *
     * @throws \BasalamSDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \BasalamSDK\Model\FileResponse|\BasalamSDK\Model\HTTPValidationError
     */
    public function createFileV3FilesPost($authorization, $file, $file_type, $custom_unique_name = null, $expire_minutes = null, string $contentType = self::contentTypes['createFileV3FilesPost'][0])
    {
        list($response) = $this->createFileV3FilesPostWithHttpInfo($authorization, $file, $file_type, $custom_unique_name, $expire_minutes, $contentType);
        return $response;
    }

    /**
     * Operation createFileV3FilesPostWithHttpInfo
     *
     * Create File
     *
     * @param  string $authorization (required)
     * @param  \SplFileObject $file (required)
     * @param  \BasalamSDK\Model\UserUploadFileTypeEnum $file_type (required)
     * @param  string|null $custom_unique_name (optional)
     * @param  int|null $expire_minutes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFileV3FilesPost'] to see the possible values for this operation
     *
     * @throws \BasalamSDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \BasalamSDK\Model\FileResponse|\BasalamSDK\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createFileV3FilesPostWithHttpInfo($authorization, $file, $file_type, $custom_unique_name = null, $expire_minutes = null, string $contentType = self::contentTypes['createFileV3FilesPost'][0])
    {
        $request = $this->createFileV3FilesPostRequest($authorization, $file, $file_type, $custom_unique_name, $expire_minutes, $contentType);
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\BasalamSDK\Model\FileResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\BasalamSDK\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\BasalamSDK\Model\FileResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BasalamSDK\Model\FileResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BasalamSDK\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation createFileV3FilesPostAsync
     *
     * Create File
     *
     * @param  string $authorization (required)
     * @param  \SplFileObject $file (required)
     * @param  \BasalamSDK\Model\UserUploadFileTypeEnum $file_type (required)
     * @param  string|null $custom_unique_name (optional)
     * @param  int|null $expire_minutes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFileV3FilesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createFileV3FilesPostAsync($authorization, $file, $file_type, $custom_unique_name = null, $expire_minutes = null, string $contentType = self::contentTypes['createFileV3FilesPost'][0])
    {
        return $this->createFileV3FilesPostAsyncWithHttpInfo($authorization, $file, $file_type, $custom_unique_name, $expire_minutes, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createFileV3FilesPostAsyncWithHttpInfo
     *
     * Create File
     *
     * @param  string $authorization (required)
     * @param  \SplFileObject $file (required)
     * @param  \BasalamSDK\Model\UserUploadFileTypeEnum $file_type (required)
     * @param  string|null $custom_unique_name (optional)
     * @param  int|null $expire_minutes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFileV3FilesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createFileV3FilesPostAsyncWithHttpInfo($authorization, $file, $file_type, $custom_unique_name = null, $expire_minutes = null, string $contentType = self::contentTypes['createFileV3FilesPost'][0])
    {
        $returnType = '\BasalamSDK\Model\FileResponse';
        $request = $this->createFileV3FilesPostRequest($authorization, $file, $file_type, $custom_unique_name, $expire_minutes, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createFileV3FilesPost'
     *
     * @param  string $authorization (required)
     * @param  \SplFileObject $file (required)
     * @param  \BasalamSDK\Model\UserUploadFileTypeEnum $file_type (required)
     * @param  string|null $custom_unique_name (optional)
     * @param  int|null $expire_minutes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFileV3FilesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    // public function createFileV3FilesPostRequest($authorization, $file, $file_type, $custom_unique_name = null, $expire_minutes = null, string $contentType = self::contentTypes['createFileV3FilesPost'][0])
    // {

    //     // verify the required parameter 'authorization' is set
    //     if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
    //         throw new \InvalidArgumentException(
    //             'Missing the required parameter $authorization when calling createFileV3FilesPost'
    //         );
    //     }

    //     // verify the required parameter 'file' is set
    //     if ($file === null || (is_array($file) && count($file) === 0)) {
    //         throw new \InvalidArgumentException(
    //             'Missing the required parameter $file when calling createFileV3FilesPost'
    //         );
    //     }

    //     // verify the required parameter 'file_type' is set
    //     if ($file_type === null || (is_array($file_type) && count($file_type) === 0)) {
    //         throw new \InvalidArgumentException(
    //             'Missing the required parameter $file_type when calling createFileV3FilesPost'
    //         );
    //     }




    //     $resourcePath = '/v3/files';
    //     $formParams = [];
    //     $queryParams = [];
    //     $headerParams = [];
    //     $httpBody = '';
    //     $multipart = false;


    //     // header params
    //     if ($authorization !== null) {
    //         $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
    //     }


    //     // form params
    //     $formDataProcessor = new FormDataProcessor();

    //     $formData = $formDataProcessor->prepare([
    //         'file' => $file,
    //         'file_type' => $file_type,
    //         'custom_unique_name' => $custom_unique_name,
    //         'expire_minutes' => $expire_minutes,
    //     ]);

    //     $formParams = $formDataProcessor->flatten($formData);
    //     $multipart = $formDataProcessor->has_file;

    //     $multipart = true;
    //     $headers = $this->headerSelector->selectHeaders(
    //         ['application/json', ],
    //         $contentType,
    //         $multipart
    //     );

    //     // for model (json/xml)
    //     if (count($formParams) > 0) {
    //         if ($multipart) {
    //             $multipartContents = [];
    //             foreach ($formParams as $formParamName => $formParamValue) {
    //                 $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    // foreach ($formParamValueItems as $formParamValueItem) {
                    //     $multipartContents[] = [
                    //         'name' => $formParamName,
                    //         'contents' => $formParamValueItem,
                    //         'filename' => $formParamName === 'file' ? 'upload.jpg' : null
                    //     ];
                    // }
    //             }
    //             // for HTTP post (form)
    //             $httpBody = new MultipartStream($multipartContents);

    //         } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
    //             # if Content-Type contains "application/json", json_encode the form parameters
    //             $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
    //         } else {
    //             // for HTTP post (form)
    //             $httpBody = ObjectSerializer::buildQuery($formParams);
    //         }
    //     }


    //     $defaultHeaders = [];
    //     if ($this->config->getUserAgent()) {
    //         $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
    //     }

    //     $headers = array_merge(
    //         $defaultHeaders,
    //         $headerParams,
    //         $headers
    //     );

    //     $operationHost = $this->config->getHost();
    //     $query = ObjectSerializer::buildQuery($queryParams);
    //     return new Request(
    //         'POST',
    //         $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
    //         $headers,
    //         $httpBody
    //     );
    // }

    public function createFileV3FilesPostRequest(
        $authorization,
        $file,
        $file_type,
        $custom_unique_name = null,
        $expire_minutes = null,
        string $contentType = self::contentTypes['createFileV3FilesPost'][0]
    ) {
        if (!$authorization) {
            throw new \InvalidArgumentException('Missing authorization');
        }
        if (!$file) {
            throw new \InvalidArgumentException('Missing file');
        }
        if (!$file_type) {
            throw new \InvalidArgumentException('Missing file_type');
        }

        $resourcePath = '/v3/files';
        $multipart = true;
        $formParams = [];

        if (is_string($file)) {
            $file = Utils::tryFopen($file, 'r');
        }

        $stream = Utils::streamFor($file);

        $multipartContents = [
            [
                'name'     => 'file',
                'contents' => $stream,
                'filename' => 'upload.jpg',
                'headers'  => [
                    'Content-Type' => 'image/jpeg',
                ],
            ],
            [
                'name'     => 'file_type',
                'contents' => is_object($file_type) ? (string) $file_type : $file_type,
            ]
        ];

        if ($custom_unique_name !== null) {
            $multipartContents[] = [
                'name'     => 'custom_unique_name',
                'contents' => $custom_unique_name
            ];
        }

        if ($expire_minutes !== null) {
            $multipartContents[] = [
                'name'     => 'expire_minutes',
                'contents' => $expire_minutes
            ];
        }

        $headers = $this->headerSelector->selectHeaders(['application/json'], $contentType, $multipart);

        $headers['authorization'] = ObjectSerializer::toHeaderValue($authorization);

        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }

        $operationHost = $this->config->getHost();
        $httpBody = new MultipartStream($multipartContents);

        return new Request(
            'POST',
            $operationHost . $resourcePath,
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
