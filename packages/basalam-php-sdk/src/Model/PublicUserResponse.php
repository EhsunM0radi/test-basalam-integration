<?php
/**
 * PublicUserResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  BasalamSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * basalam
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BasalamSDK\Model;

use \ArrayAccess;
use \BasalamSDK\ObjectSerializer;

/**
 * PublicUserResponse Class Doc Comment
 *
 * @category Class
 * @package  BasalamSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PublicUserResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PublicUserResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'hash_id' => 'string',
        'username' => 'string',
        'name' => 'string',
        'avatar' => '\BasalamSDK\Model\PhotoResponse',
        'marked_type' => '\BasalamSDK\Model\EnumResponse',
        'user_follower_count' => 'int',
        'user_following_count' => 'int',
        'gender' => '\BasalamSDK\Model\EnumResponse',
        'bio' => 'string',
        'city' => '\BasalamSDK\Model\CityResponse',
        'created_at' => 'string',
        'last_activity' => 'string',
        'referral_journey_enum' => '\BasalamSDK\Model\EnumResponse',
        'is_banned_in_social' => 'bool',
        'ban_user' => 'object',
        'vendor' => '\BasalamSDK\Model\VendorOfUserResponse'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'hash_id' => null,
        'username' => null,
        'name' => null,
        'avatar' => null,
        'marked_type' => null,
        'user_follower_count' => null,
        'user_following_count' => null,
        'gender' => null,
        'bio' => null,
        'city' => null,
        'created_at' => null,
        'last_activity' => null,
        'referral_journey_enum' => null,
        'is_banned_in_social' => null,
        'ban_user' => null,
        'vendor' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'hash_id' => false,
        'username' => true,
        'name' => false,
        'avatar' => true,
        'marked_type' => true,
        'user_follower_count' => true,
        'user_following_count' => true,
        'gender' => true,
        'bio' => true,
        'city' => true,
        'created_at' => true,
        'last_activity' => true,
        'referral_journey_enum' => true,
        'is_banned_in_social' => true,
        'ban_user' => true,
        'vendor' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'hash_id' => 'hash_id',
        'username' => 'username',
        'name' => 'name',
        'avatar' => 'avatar',
        'marked_type' => 'marked_type',
        'user_follower_count' => 'user_follower_count',
        'user_following_count' => 'user_following_count',
        'gender' => 'gender',
        'bio' => 'bio',
        'city' => 'city',
        'created_at' => 'created_at',
        'last_activity' => 'last_activity',
        'referral_journey_enum' => 'referral_journey_enum',
        'is_banned_in_social' => 'is_banned_in_social',
        'ban_user' => 'ban_user',
        'vendor' => 'vendor'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'hash_id' => 'setHashId',
        'username' => 'setUsername',
        'name' => 'setName',
        'avatar' => 'setAvatar',
        'marked_type' => 'setMarkedType',
        'user_follower_count' => 'setUserFollowerCount',
        'user_following_count' => 'setUserFollowingCount',
        'gender' => 'setGender',
        'bio' => 'setBio',
        'city' => 'setCity',
        'created_at' => 'setCreatedAt',
        'last_activity' => 'setLastActivity',
        'referral_journey_enum' => 'setReferralJourneyEnum',
        'is_banned_in_social' => 'setIsBannedInSocial',
        'ban_user' => 'setBanUser',
        'vendor' => 'setVendor'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'hash_id' => 'getHashId',
        'username' => 'getUsername',
        'name' => 'getName',
        'avatar' => 'getAvatar',
        'marked_type' => 'getMarkedType',
        'user_follower_count' => 'getUserFollowerCount',
        'user_following_count' => 'getUserFollowingCount',
        'gender' => 'getGender',
        'bio' => 'getBio',
        'city' => 'getCity',
        'created_at' => 'getCreatedAt',
        'last_activity' => 'getLastActivity',
        'referral_journey_enum' => 'getReferralJourneyEnum',
        'is_banned_in_social' => 'getIsBannedInSocial',
        'ban_user' => 'getBanUser',
        'vendor' => 'getVendor'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('hash_id', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('avatar', $data ?? [], null);
        $this->setIfExists('marked_type', $data ?? [], null);
        $this->setIfExists('user_follower_count', $data ?? [], null);
        $this->setIfExists('user_following_count', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('bio', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('last_activity', $data ?? [], null);
        $this->setIfExists('referral_journey_enum', $data ?? [], null);
        $this->setIfExists('is_banned_in_social', $data ?? [], null);
        $this->setIfExists('ban_user', $data ?? [], null);
        $this->setIfExists('vendor', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['hash_id'] === null) {
            $invalidProperties[] = "'hash_id' can't be null";
        }
        if ($this->container['username'] === null) {
            $invalidProperties[] = "'username' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['avatar'] === null) {
            $invalidProperties[] = "'avatar' can't be null";
        }
        if ($this->container['marked_type'] === null) {
            $invalidProperties[] = "'marked_type' can't be null";
        }
        if ($this->container['gender'] === null) {
            $invalidProperties[] = "'gender' can't be null";
        }
        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['referral_journey_enum'] === null) {
            $invalidProperties[] = "'referral_journey_enum' can't be null";
        }
        if ($this->container['is_banned_in_social'] === null) {
            $invalidProperties[] = "'is_banned_in_social' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets hash_id
     *
     * @return string
     */
    public function getHashId()
    {
        return $this->container['hash_id'];
    }

    /**
     * Sets hash_id
     *
     * @param string $hash_id hash_id
     *
     * @return self
     */
    public function setHashId($hash_id)
    {
        if (is_null($hash_id)) {
            throw new \InvalidArgumentException('non-nullable hash_id cannot be null');
        }
        $this->container['hash_id'] = $hash_id;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            array_push($this->openAPINullablesSetToNull, 'username');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('username', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets avatar
     *
     * @return \BasalamSDK\Model\PhotoResponse
     */
    public function getAvatar()
    {
        return $this->container['avatar'];
    }

    /**
     * Sets avatar
     *
     * @param \BasalamSDK\Model\PhotoResponse $avatar avatar
     *
     * @return self
     */
    public function setAvatar($avatar)
    {
        if (is_null($avatar)) {
            array_push($this->openAPINullablesSetToNull, 'avatar');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('avatar', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['avatar'] = $avatar;

        return $this;
    }

    /**
     * Gets marked_type
     *
     * @return \BasalamSDK\Model\EnumResponse
     */
    public function getMarkedType()
    {
        return $this->container['marked_type'];
    }

    /**
     * Sets marked_type
     *
     * @param \BasalamSDK\Model\EnumResponse $marked_type marked_type
     *
     * @return self
     */
    public function setMarkedType($marked_type)
    {
        if (is_null($marked_type)) {
            array_push($this->openAPINullablesSetToNull, 'marked_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('marked_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['marked_type'] = $marked_type;

        return $this;
    }

    /**
     * Gets user_follower_count
     *
     * @return int|null
     */
    public function getUserFollowerCount()
    {
        return $this->container['user_follower_count'];
    }

    /**
     * Sets user_follower_count
     *
     * @param int|null $user_follower_count user_follower_count
     *
     * @return self
     */
    public function setUserFollowerCount($user_follower_count)
    {
        if (is_null($user_follower_count)) {
            array_push($this->openAPINullablesSetToNull, 'user_follower_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_follower_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_follower_count'] = $user_follower_count;

        return $this;
    }

    /**
     * Gets user_following_count
     *
     * @return int|null
     */
    public function getUserFollowingCount()
    {
        return $this->container['user_following_count'];
    }

    /**
     * Sets user_following_count
     *
     * @param int|null $user_following_count user_following_count
     *
     * @return self
     */
    public function setUserFollowingCount($user_following_count)
    {
        if (is_null($user_following_count)) {
            array_push($this->openAPINullablesSetToNull, 'user_following_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_following_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_following_count'] = $user_following_count;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return \BasalamSDK\Model\EnumResponse
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param \BasalamSDK\Model\EnumResponse $gender gender
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            array_push($this->openAPINullablesSetToNull, 'gender');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gender', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets bio
     *
     * @return string|null
     */
    public function getBio()
    {
        return $this->container['bio'];
    }

    /**
     * Sets bio
     *
     * @param string|null $bio bio
     *
     * @return self
     */
    public function setBio($bio)
    {
        if (is_null($bio)) {
            array_push($this->openAPINullablesSetToNull, 'bio');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bio', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bio'] = $bio;

        return $this;
    }

    /**
     * Gets city
     *
     * @return \BasalamSDK\Model\CityResponse
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param \BasalamSDK\Model\CityResponse $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            array_push($this->openAPINullablesSetToNull, 'city');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('city', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            array_push($this->openAPINullablesSetToNull, 'created_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets last_activity
     *
     * @return string|null
     */
    public function getLastActivity()
    {
        return $this->container['last_activity'];
    }

    /**
     * Sets last_activity
     *
     * @param string|null $last_activity last_activity
     *
     * @return self
     */
    public function setLastActivity($last_activity)
    {
        if (is_null($last_activity)) {
            array_push($this->openAPINullablesSetToNull, 'last_activity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_activity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_activity'] = $last_activity;

        return $this;
    }

    /**
     * Gets referral_journey_enum
     *
     * @return \BasalamSDK\Model\EnumResponse
     */
    public function getReferralJourneyEnum()
    {
        return $this->container['referral_journey_enum'];
    }

    /**
     * Sets referral_journey_enum
     *
     * @param \BasalamSDK\Model\EnumResponse $referral_journey_enum referral_journey_enum
     *
     * @return self
     */
    public function setReferralJourneyEnum($referral_journey_enum)
    {
        if (is_null($referral_journey_enum)) {
            array_push($this->openAPINullablesSetToNull, 'referral_journey_enum');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('referral_journey_enum', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['referral_journey_enum'] = $referral_journey_enum;

        return $this;
    }

    /**
     * Gets is_banned_in_social
     *
     * @return bool
     */
    public function getIsBannedInSocial()
    {
        return $this->container['is_banned_in_social'];
    }

    /**
     * Sets is_banned_in_social
     *
     * @param bool $is_banned_in_social is_banned_in_social
     *
     * @return self
     */
    public function setIsBannedInSocial($is_banned_in_social)
    {
        if (is_null($is_banned_in_social)) {
            array_push($this->openAPINullablesSetToNull, 'is_banned_in_social');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_banned_in_social', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_banned_in_social'] = $is_banned_in_social;

        return $this;
    }

    /**
     * Gets ban_user
     *
     * @return object|null
     */
    public function getBanUser()
    {
        return $this->container['ban_user'];
    }

    /**
     * Sets ban_user
     *
     * @param object|null $ban_user ban_user
     *
     * @return self
     */
    public function setBanUser($ban_user)
    {
        if (is_null($ban_user)) {
            array_push($this->openAPINullablesSetToNull, 'ban_user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ban_user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ban_user'] = $ban_user;

        return $this;
    }

    /**
     * Gets vendor
     *
     * @return \BasalamSDK\Model\VendorOfUserResponse|null
     */
    public function getVendor()
    {
        return $this->container['vendor'];
    }

    /**
     * Sets vendor
     *
     * @param \BasalamSDK\Model\VendorOfUserResponse|null $vendor vendor
     *
     * @return self
     */
    public function setVendor($vendor)
    {
        if (is_null($vendor)) {
            array_push($this->openAPINullablesSetToNull, 'vendor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vendor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vendor'] = $vendor;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


