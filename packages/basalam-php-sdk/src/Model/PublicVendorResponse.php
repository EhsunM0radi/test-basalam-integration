<?php
/**
 * PublicVendorResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  BasalamSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * basalam
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BasalamSDK\Model;

use \ArrayAccess;
use \BasalamSDK\ObjectSerializer;

/**
 * PublicVendorResponse Class Doc Comment
 *
 * @category Class
 * @package  BasalamSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PublicVendorResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PublicVendorResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'identifier' => 'string',
        'title' => 'string',
        'logo' => '\BasalamSDK\Model\PhotoResponse',
        'covers' => '\BasalamSDK\Model\PhotoResponse[]',
        'available_cities' => '\BasalamSDK\Model\CityResponse[]',
        'summary' => 'string',
        'status' => '\BasalamSDK\Model\EnumResponse',
        'city' => '\BasalamSDK\Model\CityResponse',
        'category_type' => '\BasalamSDK\Model\EnumResponse[]',
        'user' => '\BasalamSDK\Model\PublicUserResponse',
        'is_active' => 'bool',
        'notice' => 'string',
        'gallery' => '\BasalamSDK\Model\PhotoResponse[]',
        'product_count' => 'int',
        'free_shipping_to_iran' => 'int',
        'free_shipping_to_same_city' => 'int',
        'about_your_life' => 'string',
        'about_your_place' => 'string',
        'worth_buy' => 'string',
        'telegram_id' => 'string',
        'telegram_channel' => 'string',
        'instagram' => 'string',
        'eitaa' => 'string',
        'order_count' => 'int',
        'last_activity' => 'string',
        'created_at' => 'string',
        'elapsed_time_from_creation' => 'string',
        'score' => 'int',
        'video' => '\BasalamSDK\Model\VideoResponse',
        'shipping_methods' => '\BasalamSDK\Model\EnumResponse[]',
        'product_sort_type' => '\BasalamSDK\Model\EnumResponse',
        'home_tab_settings' => '\BasalamSDK\Model\VendorSettingResponse[]',
        'shipping_version' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'identifier' => null,
        'title' => null,
        'logo' => null,
        'covers' => null,
        'available_cities' => null,
        'summary' => null,
        'status' => null,
        'city' => null,
        'category_type' => null,
        'user' => null,
        'is_active' => null,
        'notice' => null,
        'gallery' => null,
        'product_count' => null,
        'free_shipping_to_iran' => null,
        'free_shipping_to_same_city' => null,
        'about_your_life' => null,
        'about_your_place' => null,
        'worth_buy' => null,
        'telegram_id' => null,
        'telegram_channel' => null,
        'instagram' => null,
        'eitaa' => null,
        'order_count' => null,
        'last_activity' => null,
        'created_at' => null,
        'elapsed_time_from_creation' => null,
        'score' => null,
        'video' => null,
        'shipping_methods' => null,
        'product_sort_type' => null,
        'home_tab_settings' => null,
        'shipping_version' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'identifier' => false,
        'title' => false,
        'logo' => true,
        'covers' => true,
        'available_cities' => true,
        'summary' => true,
        'status' => false,
        'city' => false,
        'category_type' => true,
        'user' => false,
        'is_active' => false,
        'notice' => true,
        'gallery' => true,
        'product_count' => true,
        'free_shipping_to_iran' => true,
        'free_shipping_to_same_city' => true,
        'about_your_life' => true,
        'about_your_place' => true,
        'worth_buy' => true,
        'telegram_id' => true,
        'telegram_channel' => true,
        'instagram' => true,
        'eitaa' => true,
        'order_count' => true,
        'last_activity' => true,
        'created_at' => false,
        'elapsed_time_from_creation' => true,
        'score' => true,
        'video' => true,
        'shipping_methods' => true,
        'product_sort_type' => true,
        'home_tab_settings' => true,
        'shipping_version' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'identifier' => 'identifier',
        'title' => 'title',
        'logo' => 'logo',
        'covers' => 'covers',
        'available_cities' => 'available_cities',
        'summary' => 'summary',
        'status' => 'status',
        'city' => 'city',
        'category_type' => 'category_type',
        'user' => 'user',
        'is_active' => 'is_active',
        'notice' => 'notice',
        'gallery' => 'gallery',
        'product_count' => 'product_count',
        'free_shipping_to_iran' => 'free_shipping_to_iran',
        'free_shipping_to_same_city' => 'free_shipping_to_same_city',
        'about_your_life' => 'about_your_life',
        'about_your_place' => 'about_your_place',
        'worth_buy' => 'worth_buy',
        'telegram_id' => 'telegram_id',
        'telegram_channel' => 'telegram_channel',
        'instagram' => 'instagram',
        'eitaa' => 'eitaa',
        'order_count' => 'order_count',
        'last_activity' => 'last_activity',
        'created_at' => 'created_at',
        'elapsed_time_from_creation' => 'elapsed_time_from_creation',
        'score' => 'score',
        'video' => 'video',
        'shipping_methods' => 'shipping_methods',
        'product_sort_type' => 'product_sort_type',
        'home_tab_settings' => 'home_tab_settings',
        'shipping_version' => 'shipping_version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'identifier' => 'setIdentifier',
        'title' => 'setTitle',
        'logo' => 'setLogo',
        'covers' => 'setCovers',
        'available_cities' => 'setAvailableCities',
        'summary' => 'setSummary',
        'status' => 'setStatus',
        'city' => 'setCity',
        'category_type' => 'setCategoryType',
        'user' => 'setUser',
        'is_active' => 'setIsActive',
        'notice' => 'setNotice',
        'gallery' => 'setGallery',
        'product_count' => 'setProductCount',
        'free_shipping_to_iran' => 'setFreeShippingToIran',
        'free_shipping_to_same_city' => 'setFreeShippingToSameCity',
        'about_your_life' => 'setAboutYourLife',
        'about_your_place' => 'setAboutYourPlace',
        'worth_buy' => 'setWorthBuy',
        'telegram_id' => 'setTelegramId',
        'telegram_channel' => 'setTelegramChannel',
        'instagram' => 'setInstagram',
        'eitaa' => 'setEitaa',
        'order_count' => 'setOrderCount',
        'last_activity' => 'setLastActivity',
        'created_at' => 'setCreatedAt',
        'elapsed_time_from_creation' => 'setElapsedTimeFromCreation',
        'score' => 'setScore',
        'video' => 'setVideo',
        'shipping_methods' => 'setShippingMethods',
        'product_sort_type' => 'setProductSortType',
        'home_tab_settings' => 'setHomeTabSettings',
        'shipping_version' => 'setShippingVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'identifier' => 'getIdentifier',
        'title' => 'getTitle',
        'logo' => 'getLogo',
        'covers' => 'getCovers',
        'available_cities' => 'getAvailableCities',
        'summary' => 'getSummary',
        'status' => 'getStatus',
        'city' => 'getCity',
        'category_type' => 'getCategoryType',
        'user' => 'getUser',
        'is_active' => 'getIsActive',
        'notice' => 'getNotice',
        'gallery' => 'getGallery',
        'product_count' => 'getProductCount',
        'free_shipping_to_iran' => 'getFreeShippingToIran',
        'free_shipping_to_same_city' => 'getFreeShippingToSameCity',
        'about_your_life' => 'getAboutYourLife',
        'about_your_place' => 'getAboutYourPlace',
        'worth_buy' => 'getWorthBuy',
        'telegram_id' => 'getTelegramId',
        'telegram_channel' => 'getTelegramChannel',
        'instagram' => 'getInstagram',
        'eitaa' => 'getEitaa',
        'order_count' => 'getOrderCount',
        'last_activity' => 'getLastActivity',
        'created_at' => 'getCreatedAt',
        'elapsed_time_from_creation' => 'getElapsedTimeFromCreation',
        'score' => 'getScore',
        'video' => 'getVideo',
        'shipping_methods' => 'getShippingMethods',
        'product_sort_type' => 'getProductSortType',
        'home_tab_settings' => 'getHomeTabSettings',
        'shipping_version' => 'getShippingVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('identifier', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('logo', $data ?? [], null);
        $this->setIfExists('covers', $data ?? [], null);
        $this->setIfExists('available_cities', $data ?? [], null);
        $this->setIfExists('summary', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('category_type', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('is_active', $data ?? [], null);
        $this->setIfExists('notice', $data ?? [], null);
        $this->setIfExists('gallery', $data ?? [], null);
        $this->setIfExists('product_count', $data ?? [], null);
        $this->setIfExists('free_shipping_to_iran', $data ?? [], null);
        $this->setIfExists('free_shipping_to_same_city', $data ?? [], null);
        $this->setIfExists('about_your_life', $data ?? [], null);
        $this->setIfExists('about_your_place', $data ?? [], null);
        $this->setIfExists('worth_buy', $data ?? [], null);
        $this->setIfExists('telegram_id', $data ?? [], null);
        $this->setIfExists('telegram_channel', $data ?? [], null);
        $this->setIfExists('instagram', $data ?? [], null);
        $this->setIfExists('eitaa', $data ?? [], null);
        $this->setIfExists('order_count', $data ?? [], null);
        $this->setIfExists('last_activity', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('elapsed_time_from_creation', $data ?? [], null);
        $this->setIfExists('score', $data ?? [], null);
        $this->setIfExists('video', $data ?? [], null);
        $this->setIfExists('shipping_methods', $data ?? [], null);
        $this->setIfExists('product_sort_type', $data ?? [], null);
        $this->setIfExists('home_tab_settings', $data ?? [], null);
        $this->setIfExists('shipping_version', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['identifier'] === null) {
            $invalidProperties[] = "'identifier' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['logo'] === null) {
            $invalidProperties[] = "'logo' can't be null";
        }
        if ($this->container['covers'] === null) {
            $invalidProperties[] = "'covers' can't be null";
        }
        if ($this->container['available_cities'] === null) {
            $invalidProperties[] = "'available_cities' can't be null";
        }
        if ($this->container['summary'] === null) {
            $invalidProperties[] = "'summary' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ($this->container['category_type'] === null) {
            $invalidProperties[] = "'category_type' can't be null";
        }
        if ($this->container['user'] === null) {
            $invalidProperties[] = "'user' can't be null";
        }
        if ($this->container['is_active'] === null) {
            $invalidProperties[] = "'is_active' can't be null";
        }
        if ($this->container['notice'] === null) {
            $invalidProperties[] = "'notice' can't be null";
        }
        if ($this->container['gallery'] === null) {
            $invalidProperties[] = "'gallery' can't be null";
        }
        if ($this->container['free_shipping_to_iran'] === null) {
            $invalidProperties[] = "'free_shipping_to_iran' can't be null";
        }
        if ($this->container['free_shipping_to_same_city'] === null) {
            $invalidProperties[] = "'free_shipping_to_same_city' can't be null";
        }
        if ($this->container['about_your_life'] === null) {
            $invalidProperties[] = "'about_your_life' can't be null";
        }
        if ($this->container['about_your_place'] === null) {
            $invalidProperties[] = "'about_your_place' can't be null";
        }
        if ($this->container['worth_buy'] === null) {
            $invalidProperties[] = "'worth_buy' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['video'] === null) {
            $invalidProperties[] = "'video' can't be null";
        }
        if ($this->container['shipping_methods'] === null) {
            $invalidProperties[] = "'shipping_methods' can't be null";
        }
        if ($this->container['product_sort_type'] === null) {
            $invalidProperties[] = "'product_sort_type' can't be null";
        }
        if ($this->container['home_tab_settings'] === null) {
            $invalidProperties[] = "'home_tab_settings' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets identifier
     *
     * @return string
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param string $identifier identifier
     *
     * @return self
     */
    public function setIdentifier($identifier)
    {
        if (is_null($identifier)) {
            throw new \InvalidArgumentException('non-nullable identifier cannot be null');
        }
        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return \BasalamSDK\Model\PhotoResponse
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param \BasalamSDK\Model\PhotoResponse $logo logo
     *
     * @return self
     */
    public function setLogo($logo)
    {
        if (is_null($logo)) {
            array_push($this->openAPINullablesSetToNull, 'logo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('logo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets covers
     *
     * @return \BasalamSDK\Model\PhotoResponse[]
     */
    public function getCovers()
    {
        return $this->container['covers'];
    }

    /**
     * Sets covers
     *
     * @param \BasalamSDK\Model\PhotoResponse[] $covers covers
     *
     * @return self
     */
    public function setCovers($covers)
    {
        if (is_null($covers)) {
            array_push($this->openAPINullablesSetToNull, 'covers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('covers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['covers'] = $covers;

        return $this;
    }

    /**
     * Gets available_cities
     *
     * @return \BasalamSDK\Model\CityResponse[]
     */
    public function getAvailableCities()
    {
        return $this->container['available_cities'];
    }

    /**
     * Sets available_cities
     *
     * @param \BasalamSDK\Model\CityResponse[] $available_cities available_cities
     *
     * @return self
     */
    public function setAvailableCities($available_cities)
    {
        if (is_null($available_cities)) {
            array_push($this->openAPINullablesSetToNull, 'available_cities');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('available_cities', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['available_cities'] = $available_cities;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return string
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param string $summary summary
     *
     * @return self
     */
    public function setSummary($summary)
    {
        if (is_null($summary)) {
            array_push($this->openAPINullablesSetToNull, 'summary');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('summary', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \BasalamSDK\Model\EnumResponse
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \BasalamSDK\Model\EnumResponse $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets city
     *
     * @return \BasalamSDK\Model\CityResponse
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param \BasalamSDK\Model\CityResponse $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets category_type
     *
     * @return \BasalamSDK\Model\EnumResponse[]
     */
    public function getCategoryType()
    {
        return $this->container['category_type'];
    }

    /**
     * Sets category_type
     *
     * @param \BasalamSDK\Model\EnumResponse[] $category_type category_type
     *
     * @return self
     */
    public function setCategoryType($category_type)
    {
        if (is_null($category_type)) {
            array_push($this->openAPINullablesSetToNull, 'category_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('category_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['category_type'] = $category_type;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \BasalamSDK\Model\PublicUserResponse
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \BasalamSDK\Model\PublicUserResponse $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active is_active
     *
     * @return self
     */
    public function setIsActive($is_active)
    {
        if (is_null($is_active)) {
            throw new \InvalidArgumentException('non-nullable is_active cannot be null');
        }
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets notice
     *
     * @return string
     */
    public function getNotice()
    {
        return $this->container['notice'];
    }

    /**
     * Sets notice
     *
     * @param string $notice notice
     *
     * @return self
     */
    public function setNotice($notice)
    {
        if (is_null($notice)) {
            array_push($this->openAPINullablesSetToNull, 'notice');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('notice', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['notice'] = $notice;

        return $this;
    }

    /**
     * Gets gallery
     *
     * @return \BasalamSDK\Model\PhotoResponse[]
     */
    public function getGallery()
    {
        return $this->container['gallery'];
    }

    /**
     * Sets gallery
     *
     * @param \BasalamSDK\Model\PhotoResponse[] $gallery gallery
     *
     * @return self
     */
    public function setGallery($gallery)
    {
        if (is_null($gallery)) {
            array_push($this->openAPINullablesSetToNull, 'gallery');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gallery', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gallery'] = $gallery;

        return $this;
    }

    /**
     * Gets product_count
     *
     * @return int|null
     */
    public function getProductCount()
    {
        return $this->container['product_count'];
    }

    /**
     * Sets product_count
     *
     * @param int|null $product_count product_count
     *
     * @return self
     */
    public function setProductCount($product_count)
    {
        if (is_null($product_count)) {
            array_push($this->openAPINullablesSetToNull, 'product_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product_count'] = $product_count;

        return $this;
    }

    /**
     * Gets free_shipping_to_iran
     *
     * @return int
     */
    public function getFreeShippingToIran()
    {
        return $this->container['free_shipping_to_iran'];
    }

    /**
     * Sets free_shipping_to_iran
     *
     * @param int $free_shipping_to_iran free_shipping_to_iran
     *
     * @return self
     */
    public function setFreeShippingToIran($free_shipping_to_iran)
    {
        if (is_null($free_shipping_to_iran)) {
            array_push($this->openAPINullablesSetToNull, 'free_shipping_to_iran');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('free_shipping_to_iran', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['free_shipping_to_iran'] = $free_shipping_to_iran;

        return $this;
    }

    /**
     * Gets free_shipping_to_same_city
     *
     * @return int
     */
    public function getFreeShippingToSameCity()
    {
        return $this->container['free_shipping_to_same_city'];
    }

    /**
     * Sets free_shipping_to_same_city
     *
     * @param int $free_shipping_to_same_city free_shipping_to_same_city
     *
     * @return self
     */
    public function setFreeShippingToSameCity($free_shipping_to_same_city)
    {
        if (is_null($free_shipping_to_same_city)) {
            array_push($this->openAPINullablesSetToNull, 'free_shipping_to_same_city');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('free_shipping_to_same_city', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['free_shipping_to_same_city'] = $free_shipping_to_same_city;

        return $this;
    }

    /**
     * Gets about_your_life
     *
     * @return string
     */
    public function getAboutYourLife()
    {
        return $this->container['about_your_life'];
    }

    /**
     * Sets about_your_life
     *
     * @param string $about_your_life about_your_life
     *
     * @return self
     */
    public function setAboutYourLife($about_your_life)
    {
        if (is_null($about_your_life)) {
            array_push($this->openAPINullablesSetToNull, 'about_your_life');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('about_your_life', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['about_your_life'] = $about_your_life;

        return $this;
    }

    /**
     * Gets about_your_place
     *
     * @return string
     */
    public function getAboutYourPlace()
    {
        return $this->container['about_your_place'];
    }

    /**
     * Sets about_your_place
     *
     * @param string $about_your_place about_your_place
     *
     * @return self
     */
    public function setAboutYourPlace($about_your_place)
    {
        if (is_null($about_your_place)) {
            array_push($this->openAPINullablesSetToNull, 'about_your_place');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('about_your_place', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['about_your_place'] = $about_your_place;

        return $this;
    }

    /**
     * Gets worth_buy
     *
     * @return string
     */
    public function getWorthBuy()
    {
        return $this->container['worth_buy'];
    }

    /**
     * Sets worth_buy
     *
     * @param string $worth_buy worth_buy
     *
     * @return self
     */
    public function setWorthBuy($worth_buy)
    {
        if (is_null($worth_buy)) {
            array_push($this->openAPINullablesSetToNull, 'worth_buy');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('worth_buy', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['worth_buy'] = $worth_buy;

        return $this;
    }

    /**
     * Gets telegram_id
     *
     * @return string|null
     */
    public function getTelegramId()
    {
        return $this->container['telegram_id'];
    }

    /**
     * Sets telegram_id
     *
     * @param string|null $telegram_id telegram_id
     *
     * @return self
     */
    public function setTelegramId($telegram_id)
    {
        if (is_null($telegram_id)) {
            array_push($this->openAPINullablesSetToNull, 'telegram_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('telegram_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['telegram_id'] = $telegram_id;

        return $this;
    }

    /**
     * Gets telegram_channel
     *
     * @return string|null
     */
    public function getTelegramChannel()
    {
        return $this->container['telegram_channel'];
    }

    /**
     * Sets telegram_channel
     *
     * @param string|null $telegram_channel telegram_channel
     *
     * @return self
     */
    public function setTelegramChannel($telegram_channel)
    {
        if (is_null($telegram_channel)) {
            array_push($this->openAPINullablesSetToNull, 'telegram_channel');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('telegram_channel', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['telegram_channel'] = $telegram_channel;

        return $this;
    }

    /**
     * Gets instagram
     *
     * @return string|null
     */
    public function getInstagram()
    {
        return $this->container['instagram'];
    }

    /**
     * Sets instagram
     *
     * @param string|null $instagram instagram
     *
     * @return self
     */
    public function setInstagram($instagram)
    {
        if (is_null($instagram)) {
            array_push($this->openAPINullablesSetToNull, 'instagram');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('instagram', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['instagram'] = $instagram;

        return $this;
    }

    /**
     * Gets eitaa
     *
     * @return string|null
     */
    public function getEitaa()
    {
        return $this->container['eitaa'];
    }

    /**
     * Sets eitaa
     *
     * @param string|null $eitaa eitaa
     *
     * @return self
     */
    public function setEitaa($eitaa)
    {
        if (is_null($eitaa)) {
            array_push($this->openAPINullablesSetToNull, 'eitaa');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('eitaa', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['eitaa'] = $eitaa;

        return $this;
    }

    /**
     * Gets order_count
     *
     * @return int|null
     */
    public function getOrderCount()
    {
        return $this->container['order_count'];
    }

    /**
     * Sets order_count
     *
     * @param int|null $order_count order_count
     *
     * @return self
     */
    public function setOrderCount($order_count)
    {
        if (is_null($order_count)) {
            array_push($this->openAPINullablesSetToNull, 'order_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order_count'] = $order_count;

        return $this;
    }

    /**
     * Gets last_activity
     *
     * @return string|null
     */
    public function getLastActivity()
    {
        return $this->container['last_activity'];
    }

    /**
     * Sets last_activity
     *
     * @param string|null $last_activity last_activity
     *
     * @return self
     */
    public function setLastActivity($last_activity)
    {
        if (is_null($last_activity)) {
            array_push($this->openAPINullablesSetToNull, 'last_activity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_activity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_activity'] = $last_activity;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets elapsed_time_from_creation
     *
     * @return string|null
     */
    public function getElapsedTimeFromCreation()
    {
        return $this->container['elapsed_time_from_creation'];
    }

    /**
     * Sets elapsed_time_from_creation
     *
     * @param string|null $elapsed_time_from_creation elapsed_time_from_creation
     *
     * @return self
     */
    public function setElapsedTimeFromCreation($elapsed_time_from_creation)
    {
        if (is_null($elapsed_time_from_creation)) {
            array_push($this->openAPINullablesSetToNull, 'elapsed_time_from_creation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('elapsed_time_from_creation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['elapsed_time_from_creation'] = $elapsed_time_from_creation;

        return $this;
    }

    /**
     * Gets score
     *
     * @return int|null
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     *
     * @param int|null $score score
     *
     * @return self
     */
    public function setScore($score)
    {
        if (is_null($score)) {
            array_push($this->openAPINullablesSetToNull, 'score');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('score', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets video
     *
     * @return \BasalamSDK\Model\VideoResponse
     */
    public function getVideo()
    {
        return $this->container['video'];
    }

    /**
     * Sets video
     *
     * @param \BasalamSDK\Model\VideoResponse $video video
     *
     * @return self
     */
    public function setVideo($video)
    {
        if (is_null($video)) {
            array_push($this->openAPINullablesSetToNull, 'video');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('video', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['video'] = $video;

        return $this;
    }

    /**
     * Gets shipping_methods
     *
     * @return \BasalamSDK\Model\EnumResponse[]
     */
    public function getShippingMethods()
    {
        return $this->container['shipping_methods'];
    }

    /**
     * Sets shipping_methods
     *
     * @param \BasalamSDK\Model\EnumResponse[] $shipping_methods shipping_methods
     *
     * @return self
     */
    public function setShippingMethods($shipping_methods)
    {
        if (is_null($shipping_methods)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_methods');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_methods', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shipping_methods'] = $shipping_methods;

        return $this;
    }

    /**
     * Gets product_sort_type
     *
     * @return \BasalamSDK\Model\EnumResponse
     */
    public function getProductSortType()
    {
        return $this->container['product_sort_type'];
    }

    /**
     * Sets product_sort_type
     *
     * @param \BasalamSDK\Model\EnumResponse $product_sort_type product_sort_type
     *
     * @return self
     */
    public function setProductSortType($product_sort_type)
    {
        if (is_null($product_sort_type)) {
            array_push($this->openAPINullablesSetToNull, 'product_sort_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_sort_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product_sort_type'] = $product_sort_type;

        return $this;
    }

    /**
     * Gets home_tab_settings
     *
     * @return \BasalamSDK\Model\VendorSettingResponse[]
     */
    public function getHomeTabSettings()
    {
        return $this->container['home_tab_settings'];
    }

    /**
     * Sets home_tab_settings
     *
     * @param \BasalamSDK\Model\VendorSettingResponse[] $home_tab_settings home_tab_settings
     *
     * @return self
     */
    public function setHomeTabSettings($home_tab_settings)
    {
        if (is_null($home_tab_settings)) {
            array_push($this->openAPINullablesSetToNull, 'home_tab_settings');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('home_tab_settings', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['home_tab_settings'] = $home_tab_settings;

        return $this;
    }

    /**
     * Gets shipping_version
     *
     * @return int|null
     */
    public function getShippingVersion()
    {
        return $this->container['shipping_version'];
    }

    /**
     * Sets shipping_version
     *
     * @param int|null $shipping_version shipping_version
     *
     * @return self
     */
    public function setShippingVersion($shipping_version)
    {
        if (is_null($shipping_version)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_version');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_version', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shipping_version'] = $shipping_version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


