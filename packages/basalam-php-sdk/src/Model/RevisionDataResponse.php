<?php
/**
 * RevisionDataResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  BasalamSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * basalam
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BasalamSDK\Model;

use \ArrayAccess;
use \BasalamSDK\ObjectSerializer;

/**
 * RevisionDataResponse Class Doc Comment
 *
 * @category Class
 * @package  BasalamSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RevisionDataResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RevisionDataResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'title' => 'string',
        'brief' => 'string',
        'description' => 'string',
        'status' => '\BasalamSDK\Model\EnumResponse',
        'category' => '\BasalamSDK\Model\CategoryResponse',
        'keywords' => 'string[]',
        'photo' => '\BasalamSDK\Model\PhotoResponse',
        'photos' => '\BasalamSDK\Model\PhotoResponse[]',
        'video' => '\BasalamSDK\Model\VideoResponse',
        'product_attribute' => '\BasalamSDK\Model\AttributeResponse[]',
        'packaged_weight' => 'int',
        'net_weight' => 'int',
        'net_weight_decimal' => 'float',
        'preparation_day' => 'int',
        'price' => 'int',
        'primary_price' => 'int',
        'inventory' => 'int',
        'variants' => '\BasalamSDK\Model\VariantResponse[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'title' => null,
        'brief' => null,
        'description' => null,
        'status' => null,
        'category' => null,
        'keywords' => null,
        'photo' => null,
        'photos' => null,
        'video' => null,
        'product_attribute' => null,
        'packaged_weight' => null,
        'net_weight' => null,
        'net_weight_decimal' => null,
        'preparation_day' => null,
        'price' => null,
        'primary_price' => null,
        'inventory' => null,
        'variants' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'title' => true,
        'brief' => true,
        'description' => true,
        'status' => true,
        'category' => true,
        'keywords' => true,
        'photo' => true,
        'photos' => true,
        'video' => true,
        'product_attribute' => true,
        'packaged_weight' => true,
        'net_weight' => true,
        'net_weight_decimal' => true,
        'preparation_day' => true,
        'price' => true,
        'primary_price' => true,
        'inventory' => true,
        'variants' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'title' => 'title',
        'brief' => 'brief',
        'description' => 'description',
        'status' => 'status',
        'category' => 'category',
        'keywords' => 'keywords',
        'photo' => 'photo',
        'photos' => 'photos',
        'video' => 'video',
        'product_attribute' => 'product_attribute',
        'packaged_weight' => 'packaged_weight',
        'net_weight' => 'net_weight',
        'net_weight_decimal' => 'net_weight_decimal',
        'preparation_day' => 'preparation_day',
        'price' => 'price',
        'primary_price' => 'primary_price',
        'inventory' => 'inventory',
        'variants' => 'variants'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'title' => 'setTitle',
        'brief' => 'setBrief',
        'description' => 'setDescription',
        'status' => 'setStatus',
        'category' => 'setCategory',
        'keywords' => 'setKeywords',
        'photo' => 'setPhoto',
        'photos' => 'setPhotos',
        'video' => 'setVideo',
        'product_attribute' => 'setProductAttribute',
        'packaged_weight' => 'setPackagedWeight',
        'net_weight' => 'setNetWeight',
        'net_weight_decimal' => 'setNetWeightDecimal',
        'preparation_day' => 'setPreparationDay',
        'price' => 'setPrice',
        'primary_price' => 'setPrimaryPrice',
        'inventory' => 'setInventory',
        'variants' => 'setVariants'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'title' => 'getTitle',
        'brief' => 'getBrief',
        'description' => 'getDescription',
        'status' => 'getStatus',
        'category' => 'getCategory',
        'keywords' => 'getKeywords',
        'photo' => 'getPhoto',
        'photos' => 'getPhotos',
        'video' => 'getVideo',
        'product_attribute' => 'getProductAttribute',
        'packaged_weight' => 'getPackagedWeight',
        'net_weight' => 'getNetWeight',
        'net_weight_decimal' => 'getNetWeightDecimal',
        'preparation_day' => 'getPreparationDay',
        'price' => 'getPrice',
        'primary_price' => 'getPrimaryPrice',
        'inventory' => 'getInventory',
        'variants' => 'getVariants'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('brief', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('keywords', $data ?? [], null);
        $this->setIfExists('photo', $data ?? [], null);
        $this->setIfExists('photos', $data ?? [], null);
        $this->setIfExists('video', $data ?? [], null);
        $this->setIfExists('product_attribute', $data ?? [], null);
        $this->setIfExists('packaged_weight', $data ?? [], null);
        $this->setIfExists('net_weight', $data ?? [], null);
        $this->setIfExists('net_weight_decimal', $data ?? [], null);
        $this->setIfExists('preparation_day', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('primary_price', $data ?? [], null);
        $this->setIfExists('inventory', $data ?? [], null);
        $this->setIfExists('variants', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets brief
     *
     * @return string|null
     */
    public function getBrief()
    {
        return $this->container['brief'];
    }

    /**
     * Sets brief
     *
     * @param string|null $brief brief
     *
     * @return self
     */
    public function setBrief($brief)
    {
        if (is_null($brief)) {
            array_push($this->openAPINullablesSetToNull, 'brief');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('brief', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['brief'] = $brief;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \BasalamSDK\Model\EnumResponse|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \BasalamSDK\Model\EnumResponse|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets category
     *
     * @return \BasalamSDK\Model\CategoryResponse|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \BasalamSDK\Model\CategoryResponse|null $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            array_push($this->openAPINullablesSetToNull, 'category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets keywords
     *
     * @return string[]|null
     */
    public function getKeywords()
    {
        return $this->container['keywords'];
    }

    /**
     * Sets keywords
     *
     * @param string[]|null $keywords keywords
     *
     * @return self
     */
    public function setKeywords($keywords)
    {
        if (is_null($keywords)) {
            array_push($this->openAPINullablesSetToNull, 'keywords');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('keywords', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['keywords'] = $keywords;

        return $this;
    }

    /**
     * Gets photo
     *
     * @return \BasalamSDK\Model\PhotoResponse|null
     */
    public function getPhoto()
    {
        return $this->container['photo'];
    }

    /**
     * Sets photo
     *
     * @param \BasalamSDK\Model\PhotoResponse|null $photo photo
     *
     * @return self
     */
    public function setPhoto($photo)
    {
        if (is_null($photo)) {
            array_push($this->openAPINullablesSetToNull, 'photo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('photo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['photo'] = $photo;

        return $this;
    }

    /**
     * Gets photos
     *
     * @return \BasalamSDK\Model\PhotoResponse[]|null
     */
    public function getPhotos()
    {
        return $this->container['photos'];
    }

    /**
     * Sets photos
     *
     * @param \BasalamSDK\Model\PhotoResponse[]|null $photos photos
     *
     * @return self
     */
    public function setPhotos($photos)
    {
        if (is_null($photos)) {
            array_push($this->openAPINullablesSetToNull, 'photos');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('photos', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['photos'] = $photos;

        return $this;
    }

    /**
     * Gets video
     *
     * @return \BasalamSDK\Model\VideoResponse|null
     */
    public function getVideo()
    {
        return $this->container['video'];
    }

    /**
     * Sets video
     *
     * @param \BasalamSDK\Model\VideoResponse|null $video video
     *
     * @return self
     */
    public function setVideo($video)
    {
        if (is_null($video)) {
            array_push($this->openAPINullablesSetToNull, 'video');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('video', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['video'] = $video;

        return $this;
    }

    /**
     * Gets product_attribute
     *
     * @return \BasalamSDK\Model\AttributeResponse[]|null
     */
    public function getProductAttribute()
    {
        return $this->container['product_attribute'];
    }

    /**
     * Sets product_attribute
     *
     * @param \BasalamSDK\Model\AttributeResponse[]|null $product_attribute product_attribute
     *
     * @return self
     */
    public function setProductAttribute($product_attribute)
    {
        if (is_null($product_attribute)) {
            array_push($this->openAPINullablesSetToNull, 'product_attribute');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_attribute', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product_attribute'] = $product_attribute;

        return $this;
    }

    /**
     * Gets packaged_weight
     *
     * @return int|null
     */
    public function getPackagedWeight()
    {
        return $this->container['packaged_weight'];
    }

    /**
     * Sets packaged_weight
     *
     * @param int|null $packaged_weight packaged_weight
     *
     * @return self
     */
    public function setPackagedWeight($packaged_weight)
    {
        if (is_null($packaged_weight)) {
            array_push($this->openAPINullablesSetToNull, 'packaged_weight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('packaged_weight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['packaged_weight'] = $packaged_weight;

        return $this;
    }

    /**
     * Gets net_weight
     *
     * @return int|null
     */
    public function getNetWeight()
    {
        return $this->container['net_weight'];
    }

    /**
     * Sets net_weight
     *
     * @param int|null $net_weight net_weight
     *
     * @return self
     */
    public function setNetWeight($net_weight)
    {
        if (is_null($net_weight)) {
            array_push($this->openAPINullablesSetToNull, 'net_weight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('net_weight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['net_weight'] = $net_weight;

        return $this;
    }

    /**
     * Gets net_weight_decimal
     *
     * @return float|null
     */
    public function getNetWeightDecimal()
    {
        return $this->container['net_weight_decimal'];
    }

    /**
     * Sets net_weight_decimal
     *
     * @param float|null $net_weight_decimal net_weight_decimal
     *
     * @return self
     */
    public function setNetWeightDecimal($net_weight_decimal)
    {
        if (is_null($net_weight_decimal)) {
            array_push($this->openAPINullablesSetToNull, 'net_weight_decimal');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('net_weight_decimal', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['net_weight_decimal'] = $net_weight_decimal;

        return $this;
    }

    /**
     * Gets preparation_day
     *
     * @return int|null
     */
    public function getPreparationDay()
    {
        return $this->container['preparation_day'];
    }

    /**
     * Sets preparation_day
     *
     * @param int|null $preparation_day preparation_day
     *
     * @return self
     */
    public function setPreparationDay($preparation_day)
    {
        if (is_null($preparation_day)) {
            array_push($this->openAPINullablesSetToNull, 'preparation_day');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preparation_day', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['preparation_day'] = $preparation_day;

        return $this;
    }

    /**
     * Gets price
     *
     * @return int|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param int|null $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            array_push($this->openAPINullablesSetToNull, 'price');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets primary_price
     *
     * @return int|null
     */
    public function getPrimaryPrice()
    {
        return $this->container['primary_price'];
    }

    /**
     * Sets primary_price
     *
     * @param int|null $primary_price primary_price
     *
     * @return self
     */
    public function setPrimaryPrice($primary_price)
    {
        if (is_null($primary_price)) {
            array_push($this->openAPINullablesSetToNull, 'primary_price');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('primary_price', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['primary_price'] = $primary_price;

        return $this;
    }

    /**
     * Gets inventory
     *
     * @return int|null
     */
    public function getInventory()
    {
        return $this->container['inventory'];
    }

    /**
     * Sets inventory
     *
     * @param int|null $inventory inventory
     *
     * @return self
     */
    public function setInventory($inventory)
    {
        if (is_null($inventory)) {
            array_push($this->openAPINullablesSetToNull, 'inventory');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inventory', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['inventory'] = $inventory;

        return $this;
    }

    /**
     * Gets variants
     *
     * @return \BasalamSDK\Model\VariantResponse[]|null
     */
    public function getVariants()
    {
        return $this->container['variants'];
    }

    /**
     * Sets variants
     *
     * @param \BasalamSDK\Model\VariantResponse[]|null $variants variants
     *
     * @return self
     */
    public function setVariants($variants)
    {
        if (is_null($variants)) {
            array_push($this->openAPINullablesSetToNull, 'variants');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('variants', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['variants'] = $variants;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


