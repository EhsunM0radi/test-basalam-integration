<?php
/**
 * ReadProductResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  BasalamSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * basalam
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BasalamSDK\Model;

use \ArrayAccess;
use \BasalamSDK\ObjectSerializer;

/**
 * ReadProductResponse Class Doc Comment
 *
 * @category Class
 * @package  BasalamSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ReadProductResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ReadProductResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'title' => 'string',
        'price' => 'int',
        'photo' => '\BasalamSDK\Model\PhotoResponse',
        'photos' => '\BasalamSDK\Model\PhotoResponse[]',
        'video' => '\BasalamSDK\Model\VideoResponse',
        'status' => '\BasalamSDK\Model\EnumResponse',
        'vendor' => '\BasalamSDK\Model\PublicVendorResponse',
        'summary' => 'string',
        'category' => '\BasalamSDK\Model\CategoryResponse',
        'category_list' => '\BasalamSDK\Model\CategoryListResponse[]',
        'inventory' => 'int',
        'net_weight' => 'int',
        'net_weight_decimal' => 'float',
        'created_at' => 'string',
        'updated_at' => 'string',
        'description' => 'string',
        'is_saleable' => 'bool',
        'is_showable' => 'bool',
        'is_available' => 'bool',
        'primary_price' => 'int',
        'shipping_area' => '\BasalamSDK\Model\CityResponse[]',
        'packaged_weight' => 'int',
        'preparation_day' => 'int',
        'attribute_groups' => '\BasalamSDK\Model\AttributeGroupResponse[]',
        'is_free_shipping' => 'bool',
        'location_deployment' => '\BasalamSDK\Model\EnumResponse',
        'is_product_for_revision' => 'bool',
        'has_selectable_variation' => 'bool',
        'revision' => '\BasalamSDK\Model\RevisionResponse',
        'view_count' => 'int',
        'can_add_to_cart' => 'bool',
        'review_count' => 'int',
        'rating' => 'float',
        'sales_count' => 'int',
        'navigation' => '\BasalamSDK\Model\NavigationResponse',
        'variants' => '\BasalamSDK\Model\VariantResponse[]',
        'variants_selected_index' => 'int',
        'shipping_data' => '\BasalamSDK\Model\ShippingDataResponse',
        'free_shipping' => '\BasalamSDK\Model\FreeShippingResponse',
        'allow_category_change' => 'bool',
        'unit_quantity' => 'float',
        'unit_type' => '\BasalamSDK\Model\EnumResponse',
        'sku' => 'string',
        'packaging_dimensions' => '\BasalamSDK\Model\ProductDimensionResponse'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'title' => null,
        'price' => null,
        'photo' => null,
        'photos' => null,
        'video' => null,
        'status' => null,
        'vendor' => null,
        'summary' => null,
        'category' => null,
        'category_list' => null,
        'inventory' => null,
        'net_weight' => null,
        'net_weight_decimal' => null,
        'created_at' => null,
        'updated_at' => null,
        'description' => null,
        'is_saleable' => null,
        'is_showable' => null,
        'is_available' => null,
        'primary_price' => null,
        'shipping_area' => null,
        'packaged_weight' => null,
        'preparation_day' => null,
        'attribute_groups' => null,
        'is_free_shipping' => null,
        'location_deployment' => null,
        'is_product_for_revision' => null,
        'has_selectable_variation' => null,
        'revision' => null,
        'view_count' => null,
        'can_add_to_cart' => null,
        'review_count' => null,
        'rating' => null,
        'sales_count' => null,
        'navigation' => null,
        'variants' => null,
        'variants_selected_index' => null,
        'shipping_data' => null,
        'free_shipping' => null,
        'allow_category_change' => null,
        'unit_quantity' => null,
        'unit_type' => null,
        'sku' => null,
        'packaging_dimensions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'title' => false,
        'price' => true,
        'photo' => true,
        'photos' => true,
        'video' => true,
        'status' => false,
        'vendor' => false,
        'summary' => true,
        'category' => true,
        'category_list' => true,
        'inventory' => false,
        'net_weight' => false,
        'net_weight_decimal' => true,
        'created_at' => false,
        'updated_at' => false,
        'description' => true,
        'is_saleable' => false,
        'is_showable' => false,
        'is_available' => false,
        'primary_price' => true,
        'shipping_area' => true,
        'packaged_weight' => true,
        'preparation_day' => true,
        'attribute_groups' => true,
        'is_free_shipping' => false,
        'location_deployment' => true,
        'is_product_for_revision' => true,
        'has_selectable_variation' => true,
        'revision' => true,
        'view_count' => true,
        'can_add_to_cart' => false,
        'review_count' => true,
        'rating' => true,
        'sales_count' => true,
        'navigation' => true,
        'variants' => true,
        'variants_selected_index' => true,
        'shipping_data' => true,
        'free_shipping' => true,
        'allow_category_change' => true,
        'unit_quantity' => true,
        'unit_type' => true,
        'sku' => true,
        'packaging_dimensions' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'title' => 'title',
        'price' => 'price',
        'photo' => 'photo',
        'photos' => 'photos',
        'video' => 'video',
        'status' => 'status',
        'vendor' => 'vendor',
        'summary' => 'summary',
        'category' => 'category',
        'category_list' => 'category_list',
        'inventory' => 'inventory',
        'net_weight' => 'net_weight',
        'net_weight_decimal' => 'net_weight_decimal',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'description' => 'description',
        'is_saleable' => 'is_saleable',
        'is_showable' => 'is_showable',
        'is_available' => 'is_available',
        'primary_price' => 'primary_price',
        'shipping_area' => 'shipping_area',
        'packaged_weight' => 'packaged_weight',
        'preparation_day' => 'preparation_day',
        'attribute_groups' => 'attribute_groups',
        'is_free_shipping' => 'is_free_shipping',
        'location_deployment' => 'location_deployment',
        'is_product_for_revision' => 'is_product_for_revision',
        'has_selectable_variation' => 'has_selectable_variation',
        'revision' => 'revision',
        'view_count' => 'view_count',
        'can_add_to_cart' => 'can_add_to_cart',
        'review_count' => 'review_count',
        'rating' => 'rating',
        'sales_count' => 'sales_count',
        'navigation' => 'navigation',
        'variants' => 'variants',
        'variants_selected_index' => 'variants_selected_index',
        'shipping_data' => 'shipping_data',
        'free_shipping' => 'free_shipping',
        'allow_category_change' => 'allow_category_change',
        'unit_quantity' => 'unit_quantity',
        'unit_type' => 'unit_type',
        'sku' => 'sku',
        'packaging_dimensions' => 'packaging_dimensions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'title' => 'setTitle',
        'price' => 'setPrice',
        'photo' => 'setPhoto',
        'photos' => 'setPhotos',
        'video' => 'setVideo',
        'status' => 'setStatus',
        'vendor' => 'setVendor',
        'summary' => 'setSummary',
        'category' => 'setCategory',
        'category_list' => 'setCategoryList',
        'inventory' => 'setInventory',
        'net_weight' => 'setNetWeight',
        'net_weight_decimal' => 'setNetWeightDecimal',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'description' => 'setDescription',
        'is_saleable' => 'setIsSaleable',
        'is_showable' => 'setIsShowable',
        'is_available' => 'setIsAvailable',
        'primary_price' => 'setPrimaryPrice',
        'shipping_area' => 'setShippingArea',
        'packaged_weight' => 'setPackagedWeight',
        'preparation_day' => 'setPreparationDay',
        'attribute_groups' => 'setAttributeGroups',
        'is_free_shipping' => 'setIsFreeShipping',
        'location_deployment' => 'setLocationDeployment',
        'is_product_for_revision' => 'setIsProductForRevision',
        'has_selectable_variation' => 'setHasSelectableVariation',
        'revision' => 'setRevision',
        'view_count' => 'setViewCount',
        'can_add_to_cart' => 'setCanAddToCart',
        'review_count' => 'setReviewCount',
        'rating' => 'setRating',
        'sales_count' => 'setSalesCount',
        'navigation' => 'setNavigation',
        'variants' => 'setVariants',
        'variants_selected_index' => 'setVariantsSelectedIndex',
        'shipping_data' => 'setShippingData',
        'free_shipping' => 'setFreeShipping',
        'allow_category_change' => 'setAllowCategoryChange',
        'unit_quantity' => 'setUnitQuantity',
        'unit_type' => 'setUnitType',
        'sku' => 'setSku',
        'packaging_dimensions' => 'setPackagingDimensions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'title' => 'getTitle',
        'price' => 'getPrice',
        'photo' => 'getPhoto',
        'photos' => 'getPhotos',
        'video' => 'getVideo',
        'status' => 'getStatus',
        'vendor' => 'getVendor',
        'summary' => 'getSummary',
        'category' => 'getCategory',
        'category_list' => 'getCategoryList',
        'inventory' => 'getInventory',
        'net_weight' => 'getNetWeight',
        'net_weight_decimal' => 'getNetWeightDecimal',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'description' => 'getDescription',
        'is_saleable' => 'getIsSaleable',
        'is_showable' => 'getIsShowable',
        'is_available' => 'getIsAvailable',
        'primary_price' => 'getPrimaryPrice',
        'shipping_area' => 'getShippingArea',
        'packaged_weight' => 'getPackagedWeight',
        'preparation_day' => 'getPreparationDay',
        'attribute_groups' => 'getAttributeGroups',
        'is_free_shipping' => 'getIsFreeShipping',
        'location_deployment' => 'getLocationDeployment',
        'is_product_for_revision' => 'getIsProductForRevision',
        'has_selectable_variation' => 'getHasSelectableVariation',
        'revision' => 'getRevision',
        'view_count' => 'getViewCount',
        'can_add_to_cart' => 'getCanAddToCart',
        'review_count' => 'getReviewCount',
        'rating' => 'getRating',
        'sales_count' => 'getSalesCount',
        'navigation' => 'getNavigation',
        'variants' => 'getVariants',
        'variants_selected_index' => 'getVariantsSelectedIndex',
        'shipping_data' => 'getShippingData',
        'free_shipping' => 'getFreeShipping',
        'allow_category_change' => 'getAllowCategoryChange',
        'unit_quantity' => 'getUnitQuantity',
        'unit_type' => 'getUnitType',
        'sku' => 'getSku',
        'packaging_dimensions' => 'getPackagingDimensions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('photo', $data ?? [], null);
        $this->setIfExists('photos', $data ?? [], null);
        $this->setIfExists('video', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('vendor', $data ?? [], null);
        $this->setIfExists('summary', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('category_list', $data ?? [], null);
        $this->setIfExists('inventory', $data ?? [], null);
        $this->setIfExists('net_weight', $data ?? [], null);
        $this->setIfExists('net_weight_decimal', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('is_saleable', $data ?? [], null);
        $this->setIfExists('is_showable', $data ?? [], null);
        $this->setIfExists('is_available', $data ?? [], null);
        $this->setIfExists('primary_price', $data ?? [], null);
        $this->setIfExists('shipping_area', $data ?? [], null);
        $this->setIfExists('packaged_weight', $data ?? [], null);
        $this->setIfExists('preparation_day', $data ?? [], null);
        $this->setIfExists('attribute_groups', $data ?? [], null);
        $this->setIfExists('is_free_shipping', $data ?? [], null);
        $this->setIfExists('location_deployment', $data ?? [], null);
        $this->setIfExists('is_product_for_revision', $data ?? [], null);
        $this->setIfExists('has_selectable_variation', $data ?? [], null);
        $this->setIfExists('revision', $data ?? [], null);
        $this->setIfExists('view_count', $data ?? [], null);
        $this->setIfExists('can_add_to_cart', $data ?? [], null);
        $this->setIfExists('review_count', $data ?? [], null);
        $this->setIfExists('rating', $data ?? [], null);
        $this->setIfExists('sales_count', $data ?? [], null);
        $this->setIfExists('navigation', $data ?? [], null);
        $this->setIfExists('variants', $data ?? [], null);
        $this->setIfExists('variants_selected_index', $data ?? [], null);
        $this->setIfExists('shipping_data', $data ?? [], null);
        $this->setIfExists('free_shipping', $data ?? [], null);
        $this->setIfExists('allow_category_change', $data ?? [], null);
        $this->setIfExists('unit_quantity', $data ?? [], null);
        $this->setIfExists('unit_type', $data ?? [], null);
        $this->setIfExists('sku', $data ?? [], null);
        $this->setIfExists('packaging_dimensions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['photo'] === null) {
            $invalidProperties[] = "'photo' can't be null";
        }
        if ($this->container['photos'] === null) {
            $invalidProperties[] = "'photos' can't be null";
        }
        if ($this->container['video'] === null) {
            $invalidProperties[] = "'video' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['vendor'] === null) {
            $invalidProperties[] = "'vendor' can't be null";
        }
        if ($this->container['summary'] === null) {
            $invalidProperties[] = "'summary' can't be null";
        }
        if ($this->container['category'] === null) {
            $invalidProperties[] = "'category' can't be null";
        }
        if ($this->container['category_list'] === null) {
            $invalidProperties[] = "'category_list' can't be null";
        }
        if ($this->container['inventory'] === null) {
            $invalidProperties[] = "'inventory' can't be null";
        }
        if ($this->container['net_weight'] === null) {
            $invalidProperties[] = "'net_weight' can't be null";
        }
        if ($this->container['net_weight_decimal'] === null) {
            $invalidProperties[] = "'net_weight_decimal' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['is_saleable'] === null) {
            $invalidProperties[] = "'is_saleable' can't be null";
        }
        if ($this->container['is_showable'] === null) {
            $invalidProperties[] = "'is_showable' can't be null";
        }
        if ($this->container['is_available'] === null) {
            $invalidProperties[] = "'is_available' can't be null";
        }
        if ($this->container['primary_price'] === null) {
            $invalidProperties[] = "'primary_price' can't be null";
        }
        if ($this->container['shipping_area'] === null) {
            $invalidProperties[] = "'shipping_area' can't be null";
        }
        if ($this->container['packaged_weight'] === null) {
            $invalidProperties[] = "'packaged_weight' can't be null";
        }
        if ($this->container['preparation_day'] === null) {
            $invalidProperties[] = "'preparation_day' can't be null";
        }
        if ($this->container['attribute_groups'] === null) {
            $invalidProperties[] = "'attribute_groups' can't be null";
        }
        if ($this->container['is_free_shipping'] === null) {
            $invalidProperties[] = "'is_free_shipping' can't be null";
        }
        if ($this->container['location_deployment'] === null) {
            $invalidProperties[] = "'location_deployment' can't be null";
        }
        if ($this->container['is_product_for_revision'] === null) {
            $invalidProperties[] = "'is_product_for_revision' can't be null";
        }
        if ($this->container['has_selectable_variation'] === null) {
            $invalidProperties[] = "'has_selectable_variation' can't be null";
        }
        if ($this->container['revision'] === null) {
            $invalidProperties[] = "'revision' can't be null";
        }
        if ($this->container['view_count'] === null) {
            $invalidProperties[] = "'view_count' can't be null";
        }
        if ($this->container['can_add_to_cart'] === null) {
            $invalidProperties[] = "'can_add_to_cart' can't be null";
        }
        if ($this->container['review_count'] === null) {
            $invalidProperties[] = "'review_count' can't be null";
        }
        if ($this->container['rating'] === null) {
            $invalidProperties[] = "'rating' can't be null";
        }
        if ($this->container['sales_count'] === null) {
            $invalidProperties[] = "'sales_count' can't be null";
        }
        if ($this->container['navigation'] === null) {
            $invalidProperties[] = "'navigation' can't be null";
        }
        if ($this->container['variants'] === null) {
            $invalidProperties[] = "'variants' can't be null";
        }
        if ($this->container['variants_selected_index'] === null) {
            $invalidProperties[] = "'variants_selected_index' can't be null";
        }
        if ($this->container['shipping_data'] === null) {
            $invalidProperties[] = "'shipping_data' can't be null";
        }
        if ($this->container['free_shipping'] === null) {
            $invalidProperties[] = "'free_shipping' can't be null";
        }
        if ($this->container['allow_category_change'] === null) {
            $invalidProperties[] = "'allow_category_change' can't be null";
        }
        if ($this->container['unit_quantity'] === null) {
            $invalidProperties[] = "'unit_quantity' can't be null";
        }
        if ($this->container['unit_type'] === null) {
            $invalidProperties[] = "'unit_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets price
     *
     * @return int
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param int $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            array_push($this->openAPINullablesSetToNull, 'price');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets photo
     *
     * @return \BasalamSDK\Model\PhotoResponse
     */
    public function getPhoto()
    {
        return $this->container['photo'];
    }

    /**
     * Sets photo
     *
     * @param \BasalamSDK\Model\PhotoResponse $photo photo
     *
     * @return self
     */
    public function setPhoto($photo)
    {
        if (is_null($photo)) {
            array_push($this->openAPINullablesSetToNull, 'photo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('photo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['photo'] = $photo;

        return $this;
    }

    /**
     * Gets photos
     *
     * @return \BasalamSDK\Model\PhotoResponse[]
     */
    public function getPhotos()
    {
        return $this->container['photos'];
    }

    /**
     * Sets photos
     *
     * @param \BasalamSDK\Model\PhotoResponse[] $photos photos
     *
     * @return self
     */
    public function setPhotos($photos)
    {
        if (is_null($photos)) {
            array_push($this->openAPINullablesSetToNull, 'photos');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('photos', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['photos'] = $photos;

        return $this;
    }

    /**
     * Gets video
     *
     * @return \BasalamSDK\Model\VideoResponse
     */
    public function getVideo()
    {
        return $this->container['video'];
    }

    /**
     * Sets video
     *
     * @param \BasalamSDK\Model\VideoResponse $video video
     *
     * @return self
     */
    public function setVideo($video)
    {
        if (is_null($video)) {
            array_push($this->openAPINullablesSetToNull, 'video');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('video', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['video'] = $video;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \BasalamSDK\Model\EnumResponse
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \BasalamSDK\Model\EnumResponse $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets vendor
     *
     * @return \BasalamSDK\Model\PublicVendorResponse
     */
    public function getVendor()
    {
        return $this->container['vendor'];
    }

    /**
     * Sets vendor
     *
     * @param \BasalamSDK\Model\PublicVendorResponse $vendor vendor
     *
     * @return self
     */
    public function setVendor($vendor)
    {
        if (is_null($vendor)) {
            throw new \InvalidArgumentException('non-nullable vendor cannot be null');
        }
        $this->container['vendor'] = $vendor;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return string
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param string $summary summary
     *
     * @return self
     */
    public function setSummary($summary)
    {
        if (is_null($summary)) {
            array_push($this->openAPINullablesSetToNull, 'summary');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('summary', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets category
     *
     * @return \BasalamSDK\Model\CategoryResponse
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \BasalamSDK\Model\CategoryResponse $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            array_push($this->openAPINullablesSetToNull, 'category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets category_list
     *
     * @return \BasalamSDK\Model\CategoryListResponse[]
     */
    public function getCategoryList()
    {
        return $this->container['category_list'];
    }

    /**
     * Sets category_list
     *
     * @param \BasalamSDK\Model\CategoryListResponse[] $category_list category_list
     *
     * @return self
     */
    public function setCategoryList($category_list)
    {
        if (is_null($category_list)) {
            array_push($this->openAPINullablesSetToNull, 'category_list');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('category_list', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['category_list'] = $category_list;

        return $this;
    }

    /**
     * Gets inventory
     *
     * @return int
     */
    public function getInventory()
    {
        return $this->container['inventory'];
    }

    /**
     * Sets inventory
     *
     * @param int $inventory inventory
     *
     * @return self
     */
    public function setInventory($inventory)
    {
        if (is_null($inventory)) {
            throw new \InvalidArgumentException('non-nullable inventory cannot be null');
        }
        $this->container['inventory'] = $inventory;

        return $this;
    }

    /**
     * Gets net_weight
     *
     * @return int
     */
    public function getNetWeight()
    {
        return $this->container['net_weight'];
    }

    /**
     * Sets net_weight
     *
     * @param int $net_weight net_weight
     *
     * @return self
     */
    public function setNetWeight($net_weight)
    {
        if (is_null($net_weight)) {
            throw new \InvalidArgumentException('non-nullable net_weight cannot be null');
        }
        $this->container['net_weight'] = $net_weight;

        return $this;
    }

    /**
     * Gets net_weight_decimal
     *
     * @return float
     */
    public function getNetWeightDecimal()
    {
        return $this->container['net_weight_decimal'];
    }

    /**
     * Sets net_weight_decimal
     *
     * @param float $net_weight_decimal net_weight_decimal
     *
     * @return self
     */
    public function setNetWeightDecimal($net_weight_decimal)
    {
        if (is_null($net_weight_decimal)) {
            array_push($this->openAPINullablesSetToNull, 'net_weight_decimal');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('net_weight_decimal', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['net_weight_decimal'] = $net_weight_decimal;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets is_saleable
     *
     * @return bool
     */
    public function getIsSaleable()
    {
        return $this->container['is_saleable'];
    }

    /**
     * Sets is_saleable
     *
     * @param bool $is_saleable is_saleable
     *
     * @return self
     */
    public function setIsSaleable($is_saleable)
    {
        if (is_null($is_saleable)) {
            throw new \InvalidArgumentException('non-nullable is_saleable cannot be null');
        }
        $this->container['is_saleable'] = $is_saleable;

        return $this;
    }

    /**
     * Gets is_showable
     *
     * @return bool
     */
    public function getIsShowable()
    {
        return $this->container['is_showable'];
    }

    /**
     * Sets is_showable
     *
     * @param bool $is_showable is_showable
     *
     * @return self
     */
    public function setIsShowable($is_showable)
    {
        if (is_null($is_showable)) {
            throw new \InvalidArgumentException('non-nullable is_showable cannot be null');
        }
        $this->container['is_showable'] = $is_showable;

        return $this;
    }

    /**
     * Gets is_available
     *
     * @return bool
     */
    public function getIsAvailable()
    {
        return $this->container['is_available'];
    }

    /**
     * Sets is_available
     *
     * @param bool $is_available is_available
     *
     * @return self
     */
    public function setIsAvailable($is_available)
    {
        if (is_null($is_available)) {
            throw new \InvalidArgumentException('non-nullable is_available cannot be null');
        }
        $this->container['is_available'] = $is_available;

        return $this;
    }

    /**
     * Gets primary_price
     *
     * @return int
     */
    public function getPrimaryPrice()
    {
        return $this->container['primary_price'];
    }

    /**
     * Sets primary_price
     *
     * @param int $primary_price primary_price
     *
     * @return self
     */
    public function setPrimaryPrice($primary_price)
    {
        if (is_null($primary_price)) {
            array_push($this->openAPINullablesSetToNull, 'primary_price');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('primary_price', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['primary_price'] = $primary_price;

        return $this;
    }

    /**
     * Gets shipping_area
     *
     * @return \BasalamSDK\Model\CityResponse[]
     */
    public function getShippingArea()
    {
        return $this->container['shipping_area'];
    }

    /**
     * Sets shipping_area
     *
     * @param \BasalamSDK\Model\CityResponse[] $shipping_area shipping_area
     *
     * @return self
     */
    public function setShippingArea($shipping_area)
    {
        if (is_null($shipping_area)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shipping_area'] = $shipping_area;

        return $this;
    }

    /**
     * Gets packaged_weight
     *
     * @return int
     */
    public function getPackagedWeight()
    {
        return $this->container['packaged_weight'];
    }

    /**
     * Sets packaged_weight
     *
     * @param int $packaged_weight packaged_weight
     *
     * @return self
     */
    public function setPackagedWeight($packaged_weight)
    {
        if (is_null($packaged_weight)) {
            array_push($this->openAPINullablesSetToNull, 'packaged_weight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('packaged_weight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['packaged_weight'] = $packaged_weight;

        return $this;
    }

    /**
     * Gets preparation_day
     *
     * @return int
     */
    public function getPreparationDay()
    {
        return $this->container['preparation_day'];
    }

    /**
     * Sets preparation_day
     *
     * @param int $preparation_day preparation_day
     *
     * @return self
     */
    public function setPreparationDay($preparation_day)
    {
        if (is_null($preparation_day)) {
            array_push($this->openAPINullablesSetToNull, 'preparation_day');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preparation_day', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['preparation_day'] = $preparation_day;

        return $this;
    }

    /**
     * Gets attribute_groups
     *
     * @return \BasalamSDK\Model\AttributeGroupResponse[]
     */
    public function getAttributeGroups()
    {
        return $this->container['attribute_groups'];
    }

    /**
     * Sets attribute_groups
     *
     * @param \BasalamSDK\Model\AttributeGroupResponse[] $attribute_groups attribute_groups
     *
     * @return self
     */
    public function setAttributeGroups($attribute_groups)
    {
        if (is_null($attribute_groups)) {
            array_push($this->openAPINullablesSetToNull, 'attribute_groups');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('attribute_groups', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['attribute_groups'] = $attribute_groups;

        return $this;
    }

    /**
     * Gets is_free_shipping
     *
     * @return bool
     */
    public function getIsFreeShipping()
    {
        return $this->container['is_free_shipping'];
    }

    /**
     * Sets is_free_shipping
     *
     * @param bool $is_free_shipping is_free_shipping
     *
     * @return self
     */
    public function setIsFreeShipping($is_free_shipping)
    {
        if (is_null($is_free_shipping)) {
            throw new \InvalidArgumentException('non-nullable is_free_shipping cannot be null');
        }
        $this->container['is_free_shipping'] = $is_free_shipping;

        return $this;
    }

    /**
     * Gets location_deployment
     *
     * @return \BasalamSDK\Model\EnumResponse
     */
    public function getLocationDeployment()
    {
        return $this->container['location_deployment'];
    }

    /**
     * Sets location_deployment
     *
     * @param \BasalamSDK\Model\EnumResponse $location_deployment location_deployment
     *
     * @return self
     */
    public function setLocationDeployment($location_deployment)
    {
        if (is_null($location_deployment)) {
            array_push($this->openAPINullablesSetToNull, 'location_deployment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('location_deployment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['location_deployment'] = $location_deployment;

        return $this;
    }

    /**
     * Gets is_product_for_revision
     *
     * @return bool
     */
    public function getIsProductForRevision()
    {
        return $this->container['is_product_for_revision'];
    }

    /**
     * Sets is_product_for_revision
     *
     * @param bool $is_product_for_revision is_product_for_revision
     *
     * @return self
     */
    public function setIsProductForRevision($is_product_for_revision)
    {
        if (is_null($is_product_for_revision)) {
            array_push($this->openAPINullablesSetToNull, 'is_product_for_revision');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_product_for_revision', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_product_for_revision'] = $is_product_for_revision;

        return $this;
    }

    /**
     * Gets has_selectable_variation
     *
     * @return bool
     */
    public function getHasSelectableVariation()
    {
        return $this->container['has_selectable_variation'];
    }

    /**
     * Sets has_selectable_variation
     *
     * @param bool $has_selectable_variation has_selectable_variation
     *
     * @return self
     */
    public function setHasSelectableVariation($has_selectable_variation)
    {
        if (is_null($has_selectable_variation)) {
            array_push($this->openAPINullablesSetToNull, 'has_selectable_variation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_selectable_variation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_selectable_variation'] = $has_selectable_variation;

        return $this;
    }

    /**
     * Gets revision
     *
     * @return \BasalamSDK\Model\RevisionResponse
     */
    public function getRevision()
    {
        return $this->container['revision'];
    }

    /**
     * Sets revision
     *
     * @param \BasalamSDK\Model\RevisionResponse $revision revision
     *
     * @return self
     */
    public function setRevision($revision)
    {
        if (is_null($revision)) {
            array_push($this->openAPINullablesSetToNull, 'revision');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('revision', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['revision'] = $revision;

        return $this;
    }

    /**
     * Gets view_count
     *
     * @return int
     */
    public function getViewCount()
    {
        return $this->container['view_count'];
    }

    /**
     * Sets view_count
     *
     * @param int $view_count view_count
     *
     * @return self
     */
    public function setViewCount($view_count)
    {
        if (is_null($view_count)) {
            array_push($this->openAPINullablesSetToNull, 'view_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('view_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['view_count'] = $view_count;

        return $this;
    }

    /**
     * Gets can_add_to_cart
     *
     * @return bool
     */
    public function getCanAddToCart()
    {
        return $this->container['can_add_to_cart'];
    }

    /**
     * Sets can_add_to_cart
     *
     * @param bool $can_add_to_cart can_add_to_cart
     *
     * @return self
     */
    public function setCanAddToCart($can_add_to_cart)
    {
        if (is_null($can_add_to_cart)) {
            throw new \InvalidArgumentException('non-nullable can_add_to_cart cannot be null');
        }
        $this->container['can_add_to_cart'] = $can_add_to_cart;

        return $this;
    }

    /**
     * Gets review_count
     *
     * @return int
     */
    public function getReviewCount()
    {
        return $this->container['review_count'];
    }

    /**
     * Sets review_count
     *
     * @param int $review_count review_count
     *
     * @return self
     */
    public function setReviewCount($review_count)
    {
        if (is_null($review_count)) {
            array_push($this->openAPINullablesSetToNull, 'review_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('review_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['review_count'] = $review_count;

        return $this;
    }

    /**
     * Gets rating
     *
     * @return float
     */
    public function getRating()
    {
        return $this->container['rating'];
    }

    /**
     * Sets rating
     *
     * @param float $rating rating
     *
     * @return self
     */
    public function setRating($rating)
    {
        if (is_null($rating)) {
            array_push($this->openAPINullablesSetToNull, 'rating');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rating', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rating'] = $rating;

        return $this;
    }

    /**
     * Gets sales_count
     *
     * @return int
     */
    public function getSalesCount()
    {
        return $this->container['sales_count'];
    }

    /**
     * Sets sales_count
     *
     * @param int $sales_count sales_count
     *
     * @return self
     */
    public function setSalesCount($sales_count)
    {
        if (is_null($sales_count)) {
            array_push($this->openAPINullablesSetToNull, 'sales_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sales_count'] = $sales_count;

        return $this;
    }

    /**
     * Gets navigation
     *
     * @return \BasalamSDK\Model\NavigationResponse
     */
    public function getNavigation()
    {
        return $this->container['navigation'];
    }

    /**
     * Sets navigation
     *
     * @param \BasalamSDK\Model\NavigationResponse $navigation navigation
     *
     * @return self
     */
    public function setNavigation($navigation)
    {
        if (is_null($navigation)) {
            array_push($this->openAPINullablesSetToNull, 'navigation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('navigation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['navigation'] = $navigation;

        return $this;
    }

    /**
     * Gets variants
     *
     * @return \BasalamSDK\Model\VariantResponse[]
     */
    public function getVariants()
    {
        return $this->container['variants'];
    }

    /**
     * Sets variants
     *
     * @param \BasalamSDK\Model\VariantResponse[] $variants variants
     *
     * @return self
     */
    public function setVariants($variants)
    {
        if (is_null($variants)) {
            array_push($this->openAPINullablesSetToNull, 'variants');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('variants', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['variants'] = $variants;

        return $this;
    }

    /**
     * Gets variants_selected_index
     *
     * @return int
     */
    public function getVariantsSelectedIndex()
    {
        return $this->container['variants_selected_index'];
    }

    /**
     * Sets variants_selected_index
     *
     * @param int $variants_selected_index variants_selected_index
     *
     * @return self
     */
    public function setVariantsSelectedIndex($variants_selected_index)
    {
        if (is_null($variants_selected_index)) {
            array_push($this->openAPINullablesSetToNull, 'variants_selected_index');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('variants_selected_index', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['variants_selected_index'] = $variants_selected_index;

        return $this;
    }

    /**
     * Gets shipping_data
     *
     * @return \BasalamSDK\Model\ShippingDataResponse
     */
    public function getShippingData()
    {
        return $this->container['shipping_data'];
    }

    /**
     * Sets shipping_data
     *
     * @param \BasalamSDK\Model\ShippingDataResponse $shipping_data shipping_data
     *
     * @return self
     */
    public function setShippingData($shipping_data)
    {
        if (is_null($shipping_data)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shipping_data'] = $shipping_data;

        return $this;
    }

    /**
     * Gets free_shipping
     *
     * @return \BasalamSDK\Model\FreeShippingResponse
     */
    public function getFreeShipping()
    {
        return $this->container['free_shipping'];
    }

    /**
     * Sets free_shipping
     *
     * @param \BasalamSDK\Model\FreeShippingResponse $free_shipping free_shipping
     *
     * @return self
     */
    public function setFreeShipping($free_shipping)
    {
        if (is_null($free_shipping)) {
            array_push($this->openAPINullablesSetToNull, 'free_shipping');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('free_shipping', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['free_shipping'] = $free_shipping;

        return $this;
    }

    /**
     * Gets allow_category_change
     *
     * @return bool
     */
    public function getAllowCategoryChange()
    {
        return $this->container['allow_category_change'];
    }

    /**
     * Sets allow_category_change
     *
     * @param bool $allow_category_change allow_category_change
     *
     * @return self
     */
    public function setAllowCategoryChange($allow_category_change)
    {
        if (is_null($allow_category_change)) {
            array_push($this->openAPINullablesSetToNull, 'allow_category_change');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('allow_category_change', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['allow_category_change'] = $allow_category_change;

        return $this;
    }

    /**
     * Gets unit_quantity
     *
     * @return float
     */
    public function getUnitQuantity()
    {
        return $this->container['unit_quantity'];
    }

    /**
     * Sets unit_quantity
     *
     * @param float $unit_quantity unit_quantity
     *
     * @return self
     */
    public function setUnitQuantity($unit_quantity)
    {
        if (is_null($unit_quantity)) {
            array_push($this->openAPINullablesSetToNull, 'unit_quantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unit_quantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unit_quantity'] = $unit_quantity;

        return $this;
    }

    /**
     * Gets unit_type
     *
     * @return \BasalamSDK\Model\EnumResponse
     */
    public function getUnitType()
    {
        return $this->container['unit_type'];
    }

    /**
     * Sets unit_type
     *
     * @param \BasalamSDK\Model\EnumResponse $unit_type unit_type
     *
     * @return self
     */
    public function setUnitType($unit_type)
    {
        if (is_null($unit_type)) {
            array_push($this->openAPINullablesSetToNull, 'unit_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unit_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unit_type'] = $unit_type;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string|null
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string|null $sku sku
     *
     * @return self
     */
    public function setSku($sku)
    {
        if (is_null($sku)) {
            array_push($this->openAPINullablesSetToNull, 'sku');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sku', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets packaging_dimensions
     *
     * @return \BasalamSDK\Model\ProductDimensionResponse|null
     */
    public function getPackagingDimensions()
    {
        return $this->container['packaging_dimensions'];
    }

    /**
     * Sets packaging_dimensions
     *
     * @param \BasalamSDK\Model\ProductDimensionResponse|null $packaging_dimensions packaging_dimensions
     *
     * @return self
     */
    public function setPackagingDimensions($packaging_dimensions)
    {
        if (is_null($packaging_dimensions)) {
            array_push($this->openAPINullablesSetToNull, 'packaging_dimensions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('packaging_dimensions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['packaging_dimensions'] = $packaging_dimensions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


